import { NextRequest, NextResponse } from "next/server";
import { canDownloadDOCX } from "@/lib/downloadPermission";
import { Document, Packer, Paragraph, TextRun } from "docx";

export const runtime = "nodejs"; // for docx generation

export async function POST(req: NextRequest) {
  const permission = await canDownloadDOCX(req);
  if (!permission.allowed) {
    return NextResponse.json({ error: "Not allowed", reason: permission.reason }, { status: 403 });
  }

  try {
    const { content, fileName } = await req.json();

    if (!content || typeof content !== "string") {
      return NextResponse.json({ error: "Invalid report content" }, { status: 400 });
    }

    const disclaimer =
      "This document is automatically generated by AI for reference purposes only. It does not constitute legal advice or a substitute for consultation with a qualified attorney.\n" +
      "No personal data or uploaded files are stored or shared. The user is fully responsible for all outcomes.\n" +
      "For case-specific interpretation, compliance, or legal action, consult with a licensed legal expert in your jurisdiction.";

    const lines = content.split(/\r?\n/);
    const doc = new Document({
      sections: [
        {
          properties: {},
          children: [
            ...lines.map(
              (line) =>
                new Paragraph({
                  children: [new TextRun({ text: line })],
                  spacing: { after: 150 },
                })
            ),
            new Paragraph({ text: "", spacing: { after: 200 } }),
            ...disclaimer.split(/\r?\n/).map(
              (line) =>
                new Paragraph({
                  children: [
                    new TextRun({
                      text: line,
                      size: 16,
                      color: "777777",
                    }),
                  ],
                  spacing: { after: 60 },
                })
            ),
          ],
        },
      ],
    });

    const blob = await Packer.toBlob(doc);
    const buffer = await blob.arrayBuffer();

    return new NextResponse(Buffer.from(buffer), {
      status: 200,
      headers: {
        "Content-Type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "Content-Disposition": `attachment; filename="${fileName || "Lawrithm_Report.docx"}"`,
      },
    });
  } catch (error) {
    console.error("DOCX Error:", error);
    return NextResponse.json({ error: "Server error while generating DOCX" }, { status: 500 });
  }
}
